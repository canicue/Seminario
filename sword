base.c:int main(int argc, const char *argv[])
base.c:		char* res;
base.c:sqlite3_exec(cone,"CREATE TABLE tablita(id int,nombre text,apellido text,dni integer",&res);
Base_Sqlite.sql:  referencias TEXT NOT NULL,
Base_Sqlite.sql:  control_calidad TEXT NOT NULL,
Base_Sqlite.sql:  instruccion_operativa TEXT NOT NULL,
Base_Sqlite.sql:  cantidad_materia_prima int(11) NOT NULL,
Base_Sqlite.sql:  cantidad_insumo int(11) NOT NULL,
Base_Sqlite.sql:  descripcion_materia_prima TEXT NOT NULL,
Base_Sqlite.sql:  descripcion_producto_semielaborado TEXT NOT NULL,
Base_Sqlite.sql:  email TEXT NOT NULL,
Base_Sqlite.sql:  materia_prima tinyint(1) NOT NULL,
Base_Sqlite.sql:  producto_semi_elaborado tinyint(1) NOT NULL,
Base_Sqlite.sql:  fecha_ingreso TEXT NOT NULL,
Base_Sqlite.sql:  cantidad int(11) NOT NULL,
Base_Sqlite.sql:  obsevacion_simple_vista TEXT NOT NULL,
Base_Sqlite.sql:  embalaje TEXT NOT NULL,
Base_Sqlite.sql:  transporte TEXT NOT NULL,
Base_Sqlite.sql:  documentos_material_adjunto TEXT NOT NULL,
Base_Sqlite.sql:  fecha_de _control TEXT NOT NULL,
Base_Sqlite.sql:  responsable TEXT NOT NULL,
Base_Sqlite.sql:  KEY fk_it (responsable),
Base_Sqlite.sql:  CONSTRAINT fk_it FOREIGN KEY (responsable) REFERENCES tecnico (tecnico_id),
Base_Sqlite.sql:  cantidad int(11) NOT NULL,
Base_Sqlite.sql:  fecha TEXT NOT NULL,
Base_Sqlite.sql:  fecha_estimada_entrega TEXT NOT NULL,
Base_Sqlite.sql:  observacion TEXT NOT NULL,
Base_Sqlite.sql:  fecha TEXT NOT NULL,
Base_Sqlite.sql:  observacion TEXT NOT NULL,
Base_Sqlite.sql:  cantidad_materia_prima int(11) NOT NULL,
Base_Sqlite.sql:  cantidad_insumo_productivo int(11) NOT NULL,
Base_Sqlite.sql:  cantidad_producto_semielaborado int(11) NOT NULL,
Base_Sqlite.sql:  descripcion_materia_prima TEXT NOT NULL,
Base_Sqlite.sql:  descripcion_producto_semielaborado TEXT NOT NULL,
Base_Sqlite.sql:  cantidad int(11) NOT NULL,
Base_Sqlite.sql:  responsable_area_productiva TEXT NOT NULL,
Base_Sqlite.sql:  fecha_emision_area_productiva TEXT NOT NULL,
Base_Sqlite.sql:  responsable_area_tecnica TEXT NOT NULL,
Base_Sqlite.sql:  fecha_emision_area_tecnica TEXT NOT NULL,
Base_Sqlite.sql:  materiales_utilizados TEXT NOT NULL,
Base_Sqlite.sql:  denominacion TEXT NOT NULL,
Base_Sqlite.sql:  analisis_IR TEXT NOT NULL,
Base_Sqlite.sql:  id_programa_produccion TEXT NOT NULL,
Base_Sqlite.sql:  KEY fka (id_producto),
Base_Sqlite.sql:  KEY fk (id_programa_produccion),
Base_Sqlite.sql:  KEY fk_ot (responsable_area_tecnica),
Base_Sqlite.sql:  CONSTRAINT fk_ot FOREIGN KEY (responsable_area_tecnica) REFERENCES tecnico (tecnico_id),
Base_Sqlite.sql:  CONSTRAINT fk FOREIGN KEY (id_programa_produccion) REFERENCES programa_produccion (programa_produccion_id),
Base_Sqlite.sql:  CONSTRAINT fka FOREIGN KEY (id_producto) REFERENCES RMP (producto_id)
Base_Sqlite.sql:CREATE TABLE producto_terminado (
Base_Sqlite.sql:  producto_terminado_id TEXT NOT NULL,
Base_Sqlite.sql:  material TEXT NOT NULL,
Base_Sqlite.sql:  cantidad int(11) NOT NULL,
Base_Sqlite.sql:  emision_area_productiva TEXT NOT NULL,
Base_Sqlite.sql:  responsable_area_productiva TEXT NOT NULL,
Base_Sqlite.sql:  emision_area_tecnica TEXT NOT NULL,
Base_Sqlite.sql:  responsable_area_tecnica TEXT NOT NULL,
Base_Sqlite.sql:  PRIMARY KEY (producto_terminado_id),
Base_Sqlite.sql:  CONSTRAINT producto_terminado_ibfk_1 FOREIGN KEY (id_producto) REFERENCES RMP (producto_id),
Base_Sqlite.sql:  CONSTRAINT producto_terminado_ibfk_2 FOREIGN KEY (id_orden_produccion) REFERENCES orden_produccion (orden_produccion_id)
Base_Sqlite.sql:CREATE TABLE programa_produccion (
Base_Sqlite.sql:  programa_produccion_id TEXT NOT NULL,
Base_Sqlite.sql:  cantidad int(11) NOT NULL,
Base_Sqlite.sql:  fecha_comprometida TEXT NOT NULL,
Base_Sqlite.sql:  responsable TEXT NOT NULL,
Base_Sqlite.sql:  PRIMARY KEY (programa_produccion_id),
Base_Sqlite.sql:  KEY af (id_orden_produccion),
Base_Sqlite.sql:  CONSTRAINT af FOREIGN KEY (id_orden_produccion) REFERENCES orden_produccion (orden_produccion_id),
Base_Sqlite.sql:  CONSTRAINT programa_produccion_ibfk_1 FOREIGN KEY (id_cliente) REFERENCES cliente (cliente_id),
Base_Sqlite.sql:  CONSTRAINT responsable_fk FOREIGN KEY (responsable) REFERENCES tecnico(tecnico_id)
Base_Sqlite.sql:  email TEXT NOT NULL,
Base_Sqlite.sql:  email TEXT NOT NULL,
Base_Sqlite.sql:  area TEXT NOT NULL,
cdk_test.h: * Copyright 2005 Thomas E. Dickey
cdk_test.h: * Redistribution and use in source and binary forms, with or without
cdk_test.h: * modification, are permitted provided that the following conditions
cdk_test.h: * are met:
cdk_test.h: * 1. Redistributions of source code must retain the above copyright
cdk_test.h: *    notice, this list of conditions and the following disclaimer.
cdk_test.h: * 2. Redistributions in binary form must reproduce the above copyright
cdk_test.h: *    notice, this list of conditions and the following disclaimer in the
cdk_test.h: *    documentation and/or other materials provided with the distribution.
cdk_test.h: * 3. All advertising materials mentioning features or use of this software
cdk_test.h: *    must display the following acknowledgment:
cdk_test.h: * 	This product includes software developed by Thomas Dickey
cdk_test.h: * 	and contributors.
cdk_test.h: * 4. Neither the name of Thomas Dickey, nor the names of contributors
cdk_test.h: *    may be used to endorse or promote products derived from this software
cdk_test.h: * The whole point of this header is to define ExitProgram(), which is used for
cdk_test.h: * leak-checking when ncurses's _nc_free_and_exit() function is available. 
cdk_test.h: * Invoking that rather than 'exit()' tells ncurses to free all of the
cdk_test.h: * "permanent" memory leaks, making analysis much simpler.
cdk_test.h:#include <nc_alloc.h>
cdk_test.h:#ifndef ExitProgram
cdk_test.h:#define ExitProgram(code) exit(code)
Coincidencia en el fichero binario employees_db-code-1.0.5.tar.bz2
esta_es_la_que_vaaaaaabind_ex.c: * compilar con  gcc nombre.c -I. -I/usr/include/cdk -lcdk -lncurses -Wall
esta_es_la_que_vaaaaaabind_ex.c:#include "mensajes.h"
esta_es_la_que_vaaaaaabind_ex.c:char *XCursesProgramName = "bind_ex";
esta_es_la_que_vaaaaaabind_ex.c:static int dialogHelpCB (EObjectType cdktype GCC_UNUSED,
esta_es_la_que_vaaaaaabind_ex.c:             void *clientData GCC_UNUSED,
esta_es_la_que_vaaaaaabind_ex.c:   CDKDIALOG *dialog = (CDKDIALOG *) object;
esta_es_la_que_vaaaaaabind_ex.c:   char *mesg[5];
esta_es_la_que_vaaaaaabind_ex.c:   /* Check which button we are on. */
esta_es_la_que_vaaaaaabind_ex.c:   if (dialog->currentButton == 0)
esta_es_la_que_vaaaaaabind_ex.c:      mesg[1] = "<C>When this button is picked the name of the current";
esta_es_la_que_vaaaaaabind_ex.c:      mesg[2] = "<C>user is displayed on the screen in a popup window.";
esta_es_la_que_vaaaaaabind_ex.c:      popupLabel (ScreenOf (dialog), mesg, 3);
esta_es_la_que_vaaaaaabind_ex.c:   else if (dialog->currentButton == 1)
esta_es_la_que_vaaaaaabind_ex.c:      mesg[2] = "<C>displayed on the screen in a popup window.";
esta_es_la_que_vaaaaaabind_ex.c:      popupLabel (ScreenOf (dialog), mesg, 3);
esta_es_la_que_vaaaaaabind_ex.c:   else if (dialog->currentButton == 2)
esta_es_la_que_vaaaaaabind_ex.c:      mesg[0] = "<C></U>Help for </U>Date<!U>.";
esta_es_la_que_vaaaaaabind_ex.c:      mesg[1] = "<C>When this button is picked the current date is";
esta_es_la_que_vaaaaaabind_ex.c:      mesg[2] = "<C>displayed on the screen in a popup window.";
esta_es_la_que_vaaaaaabind_ex.c:      popupLabel (ScreenOf (dialog), mesg, 3);
esta_es_la_que_vaaaaaabind_ex.c:   else if (dialog->currentButton == 3)
esta_es_la_que_vaaaaaabind_ex.c:      mesg[1] = "<C>When this button is picked the dialog box is exited.";
esta_es_la_que_vaaaaaabind_ex.c:      popupLabel (ScreenOf (dialog), mesg, 2);
esta_es_la_que_vaaaaaabind_ex.c:int main(int argc, char **argv)
esta_es_la_que_vaaaaaabind_ex.c:   /* Declare variables. */
esta_es_la_que_vaaaaaabind_ex.c:   char     *buttons[40];
esta_es_la_que_vaaaaaabind_ex.c:   char     *message[40];
esta_es_la_que_vaaaaaabind_ex.c:   char     *info[5];
esta_es_la_que_vaaaaaabind_ex.c:   char     *loginName;
esta_es_la_que_vaaaaaabind_ex.c:   char     temp[256];
esta_es_la_que_vaaaaaabind_ex.c:   CDK_PARAMS params;
esta_es_la_que_vaaaaaabind_ex.c:   CDKparseParams(argc, argv, &params, CDK_MIN_PARAMS);
esta_es_la_que_vaaaaaabind_ex.c:   /* Start color. */
esta_es_la_que_vaaaaaabind_ex.c:   /* Set up the dialog box. */
esta_es_la_que_vaaaaaabind_ex.c:   message[0] = "<C></U>Simple Command Interface";
esta_es_la_que_vaaaaaabind_ex.c:   message[1] = "Pick the command you wish to run.";
esta_es_la_que_vaaaaaabind_ex.c:   message[2] = "<C>Press </R>?<!R> for help.";
esta_es_la_que_vaaaaaabind_ex.c:   buttons[2] = "Date";
esta_es_la_que_vaaaaaabind_ex.c:   /* Create the dialog box. */
esta_es_la_que_vaaaaaabind_ex.c:   question = newCDKDialog (cdkscreen,
esta_es_la_que_vaaaaaabind_ex.c:                CDKparamValue(&params, 'X', CENTER),
esta_es_la_que_vaaaaaabind_ex.c:                CDKparamValue(&params, 'Y', CENTER),
esta_es_la_que_vaaaaaabind_ex.c:                message, 3, buttons, 4, A_REVERSE,
esta_es_la_que_vaaaaaabind_ex.c:                CDKparamValue(&params, 'N', TRUE),
esta_es_la_que_vaaaaaabind_ex.c:                CDKparamValue(&params, 'S', FALSE));
esta_es_la_que_vaaaaaabind_ex.c:   /* Check if we got a null value back. */
esta_es_la_que_vaaaaaabind_ex.c:      /* Spit out a message. */
esta_es_la_que_vaaaaaabind_ex.c:      printf ("Oops. Can't seem to create the dialog box. ");
esta_es_la_que_vaaaaaabind_ex.c:      printf ("Is the window too small?\n");
esta_es_la_que_vaaaaaabind_ex.c:      ExitProgram (EXIT_FAILURE);
esta_es_la_que_vaaaaaabind_ex.c:   /* Create the key binding. */
esta_es_la_que_vaaaaaabind_ex.c:   bindCDKObject (vDIALOG, question, '?', dialogHelpCB, 0);
esta_es_la_que_vaaaaaabind_ex.c:   /* Activate the dialog box. */
esta_es_la_que_vaaaaaabind_ex.c:      selection = activateCDKDialog (question, (chtype *) 0);
esta_es_la_que_vaaaaaabind_ex.c:     /* Get the users login name. */
esta_es_la_que_vaaaaaabind_ex.c:     info[0] = "<C>     </U>Login Name<!U>     ";
esta_es_la_que_vaaaaaabind_ex.c:     loginName = getlogin ();
esta_es_la_que_vaaaaaabind_ex.c:     if (loginName == (char *)0)
esta_es_la_que_vaaaaaabind_ex.c:        sprintf (temp, "<C><%.*s>", (int)(sizeof(temp) - 10), loginName);
esta_es_la_que_vaaaaaabind_ex.c:     info[1] = copyChar (temp);
esta_es_la_que_vaaaaaabind_ex.c:     popupLabel (ScreenOf (question), info, 2);
esta_es_la_que_vaaaaaabind_ex.c:     freeChar (info[1]);
esta_es_la_que_vaaaaaabind_ex.c:     currentTime = localtime (&clck);
esta_es_la_que_vaaaaaabind_ex.c:     info[1] = copyChar (temp);
esta_es_la_que_vaaaaaabind_ex.c:     popupLabel (ScreenOf (question), info, 2);
esta_es_la_que_vaaaaaabind_ex.c:     freeChar (info[1]);
esta_es_la_que_vaaaaaabind_ex.c:     /* Print out the date. */
esta_es_la_que_vaaaaaabind_ex.c:     currentTime = localtime (&clck);
esta_es_la_que_vaaaaaabind_ex.c:          currentTime->tm_mday,
esta_es_la_que_vaaaaaabind_ex.c:          currentTime->tm_year % 100);
esta_es_la_que_vaaaaaabind_ex.c:     info[0] = "<C>   </U>Current Date<!U>   ";
esta_es_la_que_vaaaaaabind_ex.c:     info[1] = copyChar (temp);
esta_es_la_que_vaaaaaabind_ex.c:     popupLabel (ScreenOf (question), info, 2);
esta_es_la_que_vaaaaaabind_ex.c:     freeChar (info[1]);
esta_es_la_que_vaaaaaabind_ex.c:   /* Clean up. */
esta_es_la_que_vaaaaaabind_ex.c:   destroyCDKDialog (question);
esta_es_la_que_vaaaaaabind_ex.c:   ExitProgram (EXIT_SUCCESS);
Makefile:CFLAGS=-Wall -lncurses -lpanel -lform -lmenu 
Makefile:SFLAGS=-Wall -lsqlite3
Makefile:CFLAGS = -g -Wall -O2
Makefile:SRC = main.c funciones.c funciones.h
Makefile:OBJ = main.o funciones.o
Makefile:all: $(OBJ)
Makefile:	$(CC) $CC(CFLAGS) -o main $(OBJ)
Makefile:clean: $(RM) $(OBJ) main
Makefile:main.o: main.c funciones.h
zero.c:#include "mensajes.h"
zero.c:   char     *buttons[40];
zero.c:   char     *message[40];
zero.c:   char     *info[5];
zero.c:   char     *loginName;
zero.c:   char     temp[256];
zero.c:   char *mesg[5];
zero.c:static int dialogHelpCB (EObjectType cdktype GCC_UNUSED,
zero.c:             void *clientData GCC_UNUSED,
zero.c:   CDKDIALOG *dialog = (CDKDIALOG *) object;
zero.c:int main(int argc, char *argv[])
zero.c:		printf("unoa %s",uno);
zero.c:   CDK_PARAMS params;
zero.c:   CDKparseParams(argc, argv, &params, CDK_MIN_PARAMS);
zero.c:      mesg[1] = "<C>When this button is picked the name of the current";
zero.c:      mesg[2] = "<C>user is displayed on the screen in a popup window.";
zero.c:   buttons[2] = "Date";
zero.c:   CDKDIALOG *dialog = (CDKDIALOG *) object;
zero.c:   question = newCDKDialog (cdkscreen,
zero.c:                CDKparamValue(&params, 'X', CENTER),
zero.c:                CDKparamValue(&params, 'Y', CENTER),
zero.c:                message, 3, buttons, 4, A_REVERSE,
zero.c:                CDKparamValue(&params, 'N', TRUE),
zero.c:                CDKparamValue(&params, 'S', FALSE));
zero.c:   bindCDKObject (vDIALOG, question, '?', dialogHelpCB, 0);
zero.c:      selection = activateCDKDialog (question, (chtype *) 0);
zero.c:	  popupLabel(ScreenOf(dialog),mesg,3);
